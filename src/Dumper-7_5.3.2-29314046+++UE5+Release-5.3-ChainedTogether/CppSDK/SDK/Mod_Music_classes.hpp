#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mod_Music

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mod_Music.Mod_Music_C
// 0x0090 (0x0328 - 0x0298)
class AMod_Music_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIGLE_InterfaceComponent*               IGLE_Interface;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Music_NewTrack_0_06EF486C46E881A2A0D685BC22E57A12; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Music__Direction_06EF486C46E881A2A0D685BC22E57A12; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Music;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VolumeScale;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              SoundObject;                                       // 0x02E8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                boxScale;                                          // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Mod_Music_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Mod_Music_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Mod_Music_IGLE_Interface_K2Node_ComponentBoundEvent_2_IGLE_OnPropertyValueChanged__DelegateSignature(const class FString& PropertyName);
	void ExecuteUbergraph_Mod_Music(int32 EntryPoint);
	void FixSphereScale();
	void Music__FinishedFunc();
	void Music__UpdateFunc();
	void OnLoaded_E3528CED4589F880D8D30285FCC97A28(class UObject* Loaded);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mod_Music_C">();
	}
	static class AMod_Music_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMod_Music_C>();
	}
};
static_assert(alignof(AMod_Music_C) == 0x000008, "Wrong alignment on AMod_Music_C");
static_assert(sizeof(AMod_Music_C) == 0x000328, "Wrong size on AMod_Music_C");
static_assert(offsetof(AMod_Music_C, UberGraphFrame) == 0x000298, "Member 'AMod_Music_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Box) == 0x0002A0, "Member 'AMod_Music_C::Box' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Audio) == 0x0002A8, "Member 'AMod_Music_C::Audio' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, billboard) == 0x0002B0, "Member 'AMod_Music_C::billboard' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Sphere) == 0x0002B8, "Member 'AMod_Music_C::Sphere' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, IGLE_Interface) == 0x0002C0, "Member 'AMod_Music_C::IGLE_Interface' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, DefaultSceneRoot) == 0x0002C8, "Member 'AMod_Music_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Music_NewTrack_0_06EF486C46E881A2A0D685BC22E57A12) == 0x0002D0, "Member 'AMod_Music_C::Music_NewTrack_0_06EF486C46E881A2A0D685BC22E57A12' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Music__Direction_06EF486C46E881A2A0D685BC22E57A12) == 0x0002D4, "Member 'AMod_Music_C::Music__Direction_06EF486C46E881A2A0D685BC22E57A12' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, Music) == 0x0002D8, "Member 'AMod_Music_C::Music' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, VolumeScale) == 0x0002E0, "Member 'AMod_Music_C::VolumeScale' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, SoundObject) == 0x0002E8, "Member 'AMod_Music_C::SoundObject' has a wrong offset!");
static_assert(offsetof(AMod_Music_C, boxScale) == 0x000310, "Member 'AMod_Music_C::boxScale' has a wrong offset!");

}

