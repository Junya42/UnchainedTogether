#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IGLE_A_ScaleGizmo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "IGLE_E_GizmoSpace_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass IGLE_A_ScaleGizmo.IGLE_A_ScaleGizmo_C
// 0x00F8 (0x0390 - 0x0298)
class AIGLE_A_ScaleGizmo_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   ScaleAll;                                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScaleX;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScaleZ;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ScaleY;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Scale;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatScaleX;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScaleXColor;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatScaleY;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatScaleZ;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScaleYColor;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScaleZColor;                                       // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatScaleSphere;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScaleSphereColor;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AIGLE_A_Gizmo_C*                        Gizmo;                                             // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                PreUseScale;                                       // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sensitivity;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreUseIntersectionPoint;                           // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PreUseCursorLocation;                              // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxScaleDelta;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MatScaleAll;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_IGLE_A_ScaleGizmo(int32 EntryPoint);
	void GenerateGizmo(class AIGLE_A_Gizmo_C* GizmoOuter);
	void GenerateScaleGizmo();
	struct FVector GetForwardVectorForHitAxis(class UPrimitiveComponent* InputPin);
	void OptimalCrossProductForCamera(const struct FVector& BaseAxisForward, const struct FVector& TestAForward, const struct FVector& TestBForward, const struct FVector& CameraForward, struct FVector* OptimalCrossBetweenBaseAndTest);
	void OptimalPlaneNormalForCameraAndHitAxis(class UPrimitiveComponent* HitComponent, const struct FVector& CameraDir, struct FVector* PlaneNormal);
	void OrientScaleArrows(const struct FRotator& WorldRotation);
	void SnapDeltaScale(double DeltaScale, double* ResultDeltaScale);
	void TickGizmo();
	void UpdateGizmoSpace(EIGLE_E_GizmoSpace New_Gizmo_Space);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IGLE_A_ScaleGizmo_C">();
	}
	static class AIGLE_A_ScaleGizmo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIGLE_A_ScaleGizmo_C>();
	}
};
static_assert(alignof(AIGLE_A_ScaleGizmo_C) == 0x000008, "Wrong alignment on AIGLE_A_ScaleGizmo_C");
static_assert(sizeof(AIGLE_A_ScaleGizmo_C) == 0x000390, "Wrong size on AIGLE_A_ScaleGizmo_C");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, UberGraphFrame) == 0x000298, "Member 'AIGLE_A_ScaleGizmo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleAll) == 0x0002A0, "Member 'AIGLE_A_ScaleGizmo_C::ScaleAll' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleX) == 0x0002A8, "Member 'AIGLE_A_ScaleGizmo_C::ScaleX' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleZ) == 0x0002B0, "Member 'AIGLE_A_ScaleGizmo_C::ScaleZ' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleY) == 0x0002B8, "Member 'AIGLE_A_ScaleGizmo_C::ScaleY' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, Scale) == 0x0002C0, "Member 'AIGLE_A_ScaleGizmo_C::Scale' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, Root) == 0x0002C8, "Member 'AIGLE_A_ScaleGizmo_C::Root' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MatScaleX) == 0x0002D0, "Member 'AIGLE_A_ScaleGizmo_C::MatScaleX' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleXColor) == 0x0002D8, "Member 'AIGLE_A_ScaleGizmo_C::ScaleXColor' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MatScaleY) == 0x0002E8, "Member 'AIGLE_A_ScaleGizmo_C::MatScaleY' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MatScaleZ) == 0x0002F0, "Member 'AIGLE_A_ScaleGizmo_C::MatScaleZ' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleYColor) == 0x0002F8, "Member 'AIGLE_A_ScaleGizmo_C::ScaleYColor' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleZColor) == 0x000308, "Member 'AIGLE_A_ScaleGizmo_C::ScaleZColor' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MatScaleSphere) == 0x000318, "Member 'AIGLE_A_ScaleGizmo_C::MatScaleSphere' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, ScaleSphereColor) == 0x000320, "Member 'AIGLE_A_ScaleGizmo_C::ScaleSphereColor' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, Gizmo) == 0x000330, "Member 'AIGLE_A_ScaleGizmo_C::Gizmo' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, PreUseScale) == 0x000338, "Member 'AIGLE_A_ScaleGizmo_C::PreUseScale' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, Sensitivity) == 0x000350, "Member 'AIGLE_A_ScaleGizmo_C::Sensitivity' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, PreUseIntersectionPoint) == 0x000358, "Member 'AIGLE_A_ScaleGizmo_C::PreUseIntersectionPoint' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, PreUseCursorLocation) == 0x000370, "Member 'AIGLE_A_ScaleGizmo_C::PreUseCursorLocation' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MaxScaleDelta) == 0x000380, "Member 'AIGLE_A_ScaleGizmo_C::MaxScaleDelta' has a wrong offset!");
static_assert(offsetof(AIGLE_A_ScaleGizmo_C, MatScaleAll) == 0x000388, "Member 'AIGLE_A_ScaleGizmo_C::MatScaleAll' has a wrong offset!");

}

