#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: V_GameInstanceWithSave

#include "Basic.hpp"

#include "IGLE_GI_classes.hpp"
#include "Engine_structs.hpp"
#include "S_SavedSetting_structs.hpp"
#include "E_SettingCategory_structs.hpp"
#include "E_ApplySettingType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass V_GameInstanceWithSave.V_GameInstanceWithSave_C
// 0x0070 (0x02B8 - 0x0248)
class UV_GameInstanceWithSave_C : public UIGLE_GI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0248(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UV_SaveGame_C*                          SaveGameObject;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSaveIcon;                                      // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_SaveNotif_C*                         SaveNotifWidget;                                   // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_SavedSetting>                BackupSettings;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_SavedSetting>                DefaultSettings;                                   // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InvertX;                                           // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertY;                                           // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        X_Sensitivity;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y_Sensitivity;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 PushToTalk;                                        // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UV_SaveGame_C*                          BackupSaveObject;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_Audio_Settings(E_ApplySettingType Type);
	void Apply_Push_to_Talk(const class FString& ID);
	void Apply_Resolution_And_Windowed();
	void Apply_Settings();
	void ApplyAntialiasing();
	void ApplyAudioVolume();
	void ApplyBloom();
	void ApplyCameraInvertionSettings();
	void ApplyCameraSensitivity();
	void ApplyEffectsQuality();
	void ApplyGamma();
	void ApplyLanguage();
	void ApplyMaxFPS();
	void ApplyMicrophone(const class FString& ID);
	void ApplyMotionBlur();
	void ApplyParticlesQuality();
	void ApplyPP_Quality();
	void ApplyResolutionScale(double Resolutionscale);
	void ApplyShadowQuality();
	void ApplySharpen();
	void ApplySSR();
	void ApplyTextureQuality();
	void ApplyVideoSettings();
	void ApplyViewDistance();
	void ApplyVSync();
	void BackupSaveGameObject();
	void Cancel_Settings();
	void CancelSettings();
	void ClearSaveNotif();
	void Compare_Setting_With_Save(TArray<struct FS_SavedSetting>& SettingsArray, const class FString& ID, bool* Same);
	void ConstructDefaultSettings();
	void ConstructSavedSettings();
	void EraseCheckpoint();
	void ExecuteUbergraph_V_GameInstanceWithSave(int32 EntryPoint);
	void GetCameraSettings(bool* InvertX_0, bool* InvertY_0, double* X_Sensitivity_0, double* Y_Sensitivity_0);
	void GetCheckpoints(TArray<struct FS_Checkpoint>* Checkpoints);
	void GetPushToTalk(bool* PTT);
	void GetSaveGameObject(class UV_SaveGame_C** SaveGame);
	void GetShowDebug(bool* Debug);
	void GetTestControl(bool* TestControl);
	void GetTestPlayers(int32* Count);
	void InitSaveGameObject();
	void OnUpdateBoolSetting(const class FString& Identifier, bool NewBool, E_ApplySettingType SetType);
	void OnUpdateFloatSetting(double NewFloat, const class FString& Selection, E_ApplySettingType SetType);
	void OnUpdateStringSetting(const class FString& Identifier, const class FString& NewString, E_ApplySettingType SetType);
	void ReceiveInit();
	void Reset_Resolution();
	void ResetResolution();
	void ResetSavedSettings();
	void ResetSavedSettings_0();
	void ResetSettings();
	void ResetSettingsByCategory(E_SettingCategory Category);
	void SaveAfterRetrigerableDelay(double Delay);
	void SaveCheckpoint(const struct FS_Checkpoint& Checkpoints);
	void SaveGame();
	void SetCameraInvertX(bool InvertX_0);
	void SetCameraInvertY(bool InvertY_0);
	void SetInstructionsAlreadyShown();
	void SetResolutionScale(double NewValue, E_ApplySettingType SetType);
	void ShowResolutionConfirmWidget();
	void Update_Float(double& Float, double NewValue, double DefaultValue, double PreviousValue, E_ApplySettingType SetType);
	void UpdateBool(bool& Bool, bool NewValue);
	void UpdateBoolSetting(const class FString& Identifier, bool Bool, E_ApplySettingType Type);
	void UpdateFloatSetting(double Value, const class FString& Setting, E_ApplySettingType Type);
	void UpdateFoliageDensity(double Resolutionscale);
	void UpdateSetting(const class FString& ID, const class FString& NewValue);
	void UpdateSettingByIdentifier(const class FString& Identifier, const class FString& NewValue);
	void UpdateString(class FString& String, const class FString& NewValue, E_ApplySettingType Selection);
	void UpdateStringSetting(const class FString& Identifier, const class FString& NewString, E_ApplySettingType Type);
	void UpdateVolume(double Value, class USoundClass* InSoundClass);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"V_GameInstanceWithSave_C">();
	}
	static class UV_GameInstanceWithSave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UV_GameInstanceWithSave_C>();
	}
};
static_assert(alignof(UV_GameInstanceWithSave_C) == 0x000008, "Wrong alignment on UV_GameInstanceWithSave_C");
static_assert(sizeof(UV_GameInstanceWithSave_C) == 0x0002B8, "Wrong size on UV_GameInstanceWithSave_C");
static_assert(offsetof(UV_GameInstanceWithSave_C, UberGraphFrame) == 0x000248, "Member 'UV_GameInstanceWithSave_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, SaveGameObject) == 0x000250, "Member 'UV_GameInstanceWithSave_C::SaveGameObject' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, ShowSaveIcon) == 0x000258, "Member 'UV_GameInstanceWithSave_C::ShowSaveIcon' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, SaveNotifWidget) == 0x000260, "Member 'UV_GameInstanceWithSave_C::SaveNotifWidget' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, BackupSettings) == 0x000268, "Member 'UV_GameInstanceWithSave_C::BackupSettings' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, DefaultSettings) == 0x000278, "Member 'UV_GameInstanceWithSave_C::DefaultSettings' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, InvertX) == 0x000288, "Member 'UV_GameInstanceWithSave_C::InvertX' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, InvertY) == 0x000289, "Member 'UV_GameInstanceWithSave_C::InvertY' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, X_Sensitivity) == 0x000290, "Member 'UV_GameInstanceWithSave_C::X_Sensitivity' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, Y_Sensitivity) == 0x000298, "Member 'UV_GameInstanceWithSave_C::Y_Sensitivity' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, PushToTalk) == 0x0002A0, "Member 'UV_GameInstanceWithSave_C::PushToTalk' has a wrong offset!");
static_assert(offsetof(UV_GameInstanceWithSave_C, BackupSaveObject) == 0x0002B0, "Member 'UV_GameInstanceWithSave_C::BackupSaveObject' has a wrong offset!");

}

