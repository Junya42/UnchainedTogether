#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_NewBind

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "ChainedTogether_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_NewBind.W_NewBind_C
// 0x0038 (0x0300 - 0x02C8)
class UW_NewBind_C final : public UMyCustomWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         HorizontalBox_0;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FKey                                   SelectedKey;                                       // 0x02D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   Mapping_Name;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerMappableKeySlot                        Slot_0;                                            // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__W_NewBind_InputKeySelector_K2Node_ComponentBoundEvent_2_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey_0);
	void ExecuteUbergraph_W_NewBind(int32 EntryPoint);
	void RefreshBind(const struct FPlayerKeyMapping& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_NewBind_C">();
	}
	static class UW_NewBind_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_NewBind_C>();
	}
};
static_assert(alignof(UW_NewBind_C) == 0x000008, "Wrong alignment on UW_NewBind_C");
static_assert(sizeof(UW_NewBind_C) == 0x000300, "Wrong size on UW_NewBind_C");
static_assert(offsetof(UW_NewBind_C, UberGraphFrame) == 0x0002C8, "Member 'UW_NewBind_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_NewBind_C, HorizontalBox_0) == 0x0002D0, "Member 'UW_NewBind_C::HorizontalBox_0' has a wrong offset!");
static_assert(offsetof(UW_NewBind_C, SelectedKey) == 0x0002D8, "Member 'UW_NewBind_C::SelectedKey' has a wrong offset!");
static_assert(offsetof(UW_NewBind_C, Mapping_Name) == 0x0002F0, "Member 'UW_NewBind_C::Mapping_Name' has a wrong offset!");
static_assert(offsetof(UW_NewBind_C, Slot_0) == 0x0002F8, "Member 'UW_NewBind_C::Slot_0' has a wrong offset!");

}

