#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGameLevelEditor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct InGameLevelEditor.StringFloatPair
// 0x0018 (0x0018 - 0x0000)
struct FStringFloatPair final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStringFloatPair) == 0x000008, "Wrong alignment on FStringFloatPair");
static_assert(sizeof(FStringFloatPair) == 0x000018, "Wrong size on FStringFloatPair");
static_assert(offsetof(FStringFloatPair, String) == 0x000000, "Member 'FStringFloatPair::String' has a wrong offset!");
static_assert(offsetof(FStringFloatPair, Float) == 0x000010, "Member 'FStringFloatPair::Float' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLEPlacableActorInfo
// 0x00B8 (0x00C0 - 0x0008)
struct FIGLEPlacableActorInfo final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   SoftPlacableActorClass;                            // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     PlacableActorClass;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacableName;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacableCategory;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlacableDescription;                               // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PlacableIcon;                                      // 0x0068(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             PlacableMesh;                                      // 0x0090(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshSphereRadius;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideInEditor;                                      // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIGLEPlacableActorInfo) == 0x000008, "Wrong alignment on FIGLEPlacableActorInfo");
static_assert(sizeof(FIGLEPlacableActorInfo) == 0x0000C0, "Wrong size on FIGLEPlacableActorInfo");
static_assert(offsetof(FIGLEPlacableActorInfo, SoftPlacableActorClass) == 0x000008, "Member 'FIGLEPlacableActorInfo::SoftPlacableActorClass' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableActorClass) == 0x000030, "Member 'FIGLEPlacableActorInfo::PlacableActorClass' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableName) == 0x000038, "Member 'FIGLEPlacableActorInfo::PlacableName' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableCategory) == 0x000048, "Member 'FIGLEPlacableActorInfo::PlacableCategory' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableDescription) == 0x000058, "Member 'FIGLEPlacableActorInfo::PlacableDescription' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableIcon) == 0x000068, "Member 'FIGLEPlacableActorInfo::PlacableIcon' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, PlacableMesh) == 0x000090, "Member 'FIGLEPlacableActorInfo::PlacableMesh' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, MeshSphereRadius) == 0x0000B8, "Member 'FIGLEPlacableActorInfo::MeshSphereRadius' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableActorInfo, HideInEditor) == 0x0000BC, "Member 'FIGLEPlacableActorInfo::HideInEditor' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLEActorReference
// 0x0018 (0x0018 - 0x0000)
struct FIGLEActorReference final
{
public:
	class AActor*                                 ActorRef;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ActorID;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIGLEActorReference) == 0x000008, "Wrong alignment on FIGLEActorReference");
static_assert(sizeof(FIGLEActorReference) == 0x000018, "Wrong size on FIGLEActorReference");
static_assert(offsetof(FIGLEActorReference, ActorRef) == 0x000000, "Member 'FIGLEActorReference::ActorRef' has a wrong offset!");
static_assert(offsetof(FIGLEActorReference, ActorID) == 0x000008, "Member 'FIGLEActorReference::ActorID' has a wrong offset!");
static_assert(offsetof(FIGLEActorReference, ActorClass) == 0x000010, "Member 'FIGLEActorReference::ActorClass' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLEPropertyData
// 0x0010 (0x0010 - 0x0000)
struct FIGLEPropertyData final
{
public:
	TArray<uint8>                                 PropertyBuffer;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIGLEPropertyData) == 0x000008, "Wrong alignment on FIGLEPropertyData");
static_assert(sizeof(FIGLEPropertyData) == 0x000010, "Wrong size on FIGLEPropertyData");
static_assert(offsetof(FIGLEPropertyData, PropertyBuffer) == 0x000000, "Member 'FIGLEPropertyData::PropertyBuffer' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLEPlacableSave
// 0x00D0 (0x00D0 - 0x0000)
struct FIGLEPlacableSave final
{
public:
	int64                                         ActorID;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ActorRuntimeName;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ActorWorldTransform;                               // 0x0020(0x0060)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FIGLEPropertyData> PropertyDataMap;                                   // 0x0080(0x0050)(Edit, BlueprintVisible, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIGLEPlacableSave) == 0x000010, "Wrong alignment on FIGLEPlacableSave");
static_assert(sizeof(FIGLEPlacableSave) == 0x0000D0, "Wrong size on FIGLEPlacableSave");
static_assert(offsetof(FIGLEPlacableSave, ActorID) == 0x000000, "Member 'FIGLEPlacableSave::ActorID' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableSave, ActorRuntimeName) == 0x000008, "Member 'FIGLEPlacableSave::ActorRuntimeName' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableSave, ActorClass) == 0x000018, "Member 'FIGLEPlacableSave::ActorClass' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableSave, ActorWorldTransform) == 0x000020, "Member 'FIGLEPlacableSave::ActorWorldTransform' has a wrong offset!");
static_assert(offsetof(FIGLEPlacableSave, PropertyDataMap) == 0x000080, "Member 'FIGLEPlacableSave::PropertyDataMap' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLELevelSave
// 0x0030 (0x0030 - 0x0000)
struct FIGLELevelSave final
{
public:
	TArray<struct FIGLEPlacableSave>              SavedPlacables;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<uint8>                                 CustomData;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIGLELevelSave) == 0x000008, "Wrong alignment on FIGLELevelSave");
static_assert(sizeof(FIGLELevelSave) == 0x000030, "Wrong size on FIGLELevelSave");
static_assert(offsetof(FIGLELevelSave, SavedPlacables) == 0x000000, "Member 'FIGLELevelSave::SavedPlacables' has a wrong offset!");
static_assert(offsetof(FIGLELevelSave, CustomData) == 0x000010, "Member 'FIGLELevelSave::CustomData' has a wrong offset!");
static_assert(offsetof(FIGLELevelSave, LevelName) == 0x000020, "Member 'FIGLELevelSave::LevelName' has a wrong offset!");

// ScriptStruct InGameLevelEditor.IGLEProperty
// 0x0080 (0x0080 - 0x0000)
struct FIGLEProperty final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PropertyCategory;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            PropertyOptions;                                   // 0x0020(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UIGLE_PropertyValueObject>  PropertyValueObjectClass;                          // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIGLE_PropertyValueObject*              PropertyValue;                                     // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIGLEProperty) == 0x000008, "Wrong alignment on FIGLEProperty");
static_assert(sizeof(FIGLEProperty) == 0x000080, "Wrong size on FIGLEProperty");
static_assert(offsetof(FIGLEProperty, PropertyName) == 0x000000, "Member 'FIGLEProperty::PropertyName' has a wrong offset!");
static_assert(offsetof(FIGLEProperty, PropertyCategory) == 0x000010, "Member 'FIGLEProperty::PropertyCategory' has a wrong offset!");
static_assert(offsetof(FIGLEProperty, PropertyOptions) == 0x000020, "Member 'FIGLEProperty::PropertyOptions' has a wrong offset!");
static_assert(offsetof(FIGLEProperty, PropertyValueObjectClass) == 0x000070, "Member 'FIGLEProperty::PropertyValueObjectClass' has a wrong offset!");
static_assert(offsetof(FIGLEProperty, PropertyValue) == 0x000078, "Member 'FIGLEProperty::PropertyValue' has a wrong offset!");

}

