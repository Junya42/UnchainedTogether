#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mod_Turnstile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mod_Turnstile.Mod_Turnstile_C
// 0x00E8 (0x0380 - 0x0298)
class AMod_Turnstile_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCastShadowsProperty_C_C*               CastShadowsProperty_C;                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIGLE_InterfaceComponent*               IGLE_Interface;                                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_VinceSync_C*                         C_VinceSync;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft3;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft2;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft1;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxLeft;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight3;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight2;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight1;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BoxRight;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UC_TickOptimizer_C*                     C_TickOptimizer;                                   // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pivot;                                             // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToInteractWith;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        PrivateResetSpeed;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Turn_Rate_Target;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurnRate;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlwaysReset;                                       // 0x0338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResetSpeed;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Rewind;                                            // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 ActorsToTrigger;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<class AActor*>                         ActorsRefToTrigger;                                // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        NewAxis;                                           // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0378(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddActorToTrigger(int64 ID);
	void BndEvt__Mod_Turnstile_IGLE_Interface_K2Node_ComponentBoundEvent_0_IGLE_OnPropertyValueChanged__DelegateSignature(const class FString& PropertyName);
	void ExecuteUbergraph_Mod_Turnstile(int32 EntryPoint);
	void FindActorsToTrigger();
	void GetMaxPivotAlpha(double* Alpha);
	void GetMinPivotAlpha(double* Alpha);
	bool IsSomeoneInside(TArray<class UBoxComponent*>& Boxes);
	void MakeNewAxis();
	void OnRep_ActorsToTrigger();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveActorToTrigger(int64 ID);
	void ReplicateInteractionAll(const double Axis);
	void TryReferenceActors(bool* Success);
	void UpdateActorToInteractWith(double Axis, class UObject* Target);
	void UpdateTurn(double* TurnRate_0);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mod_Turnstile_C">();
	}
	static class AMod_Turnstile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMod_Turnstile_C>();
	}
};
static_assert(alignof(AMod_Turnstile_C) == 0x000008, "Wrong alignment on AMod_Turnstile_C");
static_assert(sizeof(AMod_Turnstile_C) == 0x000380, "Wrong size on AMod_Turnstile_C");
static_assert(offsetof(AMod_Turnstile_C, UberGraphFrame) == 0x000298, "Member 'AMod_Turnstile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, CastShadowsProperty_C) == 0x0002A0, "Member 'AMod_Turnstile_C::CastShadowsProperty_C' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, Cylinder) == 0x0002A8, "Member 'AMod_Turnstile_C::Cylinder' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, IGLE_Interface) == 0x0002B0, "Member 'AMod_Turnstile_C::IGLE_Interface' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, C_VinceSync) == 0x0002B8, "Member 'AMod_Turnstile_C::C_VinceSync' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxLeft3) == 0x0002C0, "Member 'AMod_Turnstile_C::BoxLeft3' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxLeft2) == 0x0002C8, "Member 'AMod_Turnstile_C::BoxLeft2' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxLeft1) == 0x0002D0, "Member 'AMod_Turnstile_C::BoxLeft1' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxLeft) == 0x0002D8, "Member 'AMod_Turnstile_C::BoxLeft' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxRight3) == 0x0002E0, "Member 'AMod_Turnstile_C::BoxRight3' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxRight2) == 0x0002E8, "Member 'AMod_Turnstile_C::BoxRight2' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxRight1) == 0x0002F0, "Member 'AMod_Turnstile_C::BoxRight1' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, BoxRight) == 0x0002F8, "Member 'AMod_Turnstile_C::BoxRight' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, C_TickOptimizer) == 0x000300, "Member 'AMod_Turnstile_C::C_TickOptimizer' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, Pivot) == 0x000308, "Member 'AMod_Turnstile_C::Pivot' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, DefaultSceneRoot) == 0x000310, "Member 'AMod_Turnstile_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, ActorToInteractWith) == 0x000318, "Member 'AMod_Turnstile_C::ActorToInteractWith' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, PrivateResetSpeed) == 0x000320, "Member 'AMod_Turnstile_C::PrivateResetSpeed' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, Turn_Rate_Target) == 0x000328, "Member 'AMod_Turnstile_C::Turn_Rate_Target' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, TurnRate) == 0x000330, "Member 'AMod_Turnstile_C::TurnRate' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, AlwaysReset) == 0x000338, "Member 'AMod_Turnstile_C::AlwaysReset' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, ResetSpeed) == 0x000340, "Member 'AMod_Turnstile_C::ResetSpeed' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, Rewind) == 0x000348, "Member 'AMod_Turnstile_C::Rewind' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, ActorsToTrigger) == 0x000350, "Member 'AMod_Turnstile_C::ActorsToTrigger' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, ActorsRefToTrigger) == 0x000360, "Member 'AMod_Turnstile_C::ActorsRefToTrigger' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, NewAxis) == 0x000370, "Member 'AMod_Turnstile_C::NewAxis' has a wrong offset!");
static_assert(offsetof(AMod_Turnstile_C, Speed) == 0x000378, "Member 'AMod_Turnstile_C::Speed' has a wrong offset!");

}

