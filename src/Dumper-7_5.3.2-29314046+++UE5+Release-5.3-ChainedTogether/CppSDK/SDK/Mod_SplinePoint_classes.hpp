#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mod_SplinePoint

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mod_SplinePoint.Mod_SplinePoint_C
// 0x0058 (0x02F0 - 0x0298)
class AMod_SplinePoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UIGLE_InterfaceComponent*               IGLE_Interface;                                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         PointIndex;                                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMod_Spline_C*                          SplineManager;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CallOnDestroyed;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousLocation;                                  // 0x02D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CheckReleaseMove();
	void ExecuteUbergraph_Mod_SplinePoint(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mod_SplinePoint_C">();
	}
	static class AMod_SplinePoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMod_SplinePoint_C>();
	}
};
static_assert(alignof(AMod_SplinePoint_C) == 0x000008, "Wrong alignment on AMod_SplinePoint_C");
static_assert(sizeof(AMod_SplinePoint_C) == 0x0002F0, "Wrong size on AMod_SplinePoint_C");
static_assert(offsetof(AMod_SplinePoint_C, UberGraphFrame) == 0x000298, "Member 'AMod_SplinePoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, IGLE_Interface) == 0x0002A0, "Member 'AMod_SplinePoint_C::IGLE_Interface' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, TextRender) == 0x0002A8, "Member 'AMod_SplinePoint_C::TextRender' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, Sphere) == 0x0002B0, "Member 'AMod_SplinePoint_C::Sphere' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, DefaultSceneRoot) == 0x0002B8, "Member 'AMod_SplinePoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, PointIndex) == 0x0002C0, "Member 'AMod_SplinePoint_C::PointIndex' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, SplineManager) == 0x0002C8, "Member 'AMod_SplinePoint_C::SplineManager' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, CallOnDestroyed) == 0x0002D0, "Member 'AMod_SplinePoint_C::CallOnDestroyed' has a wrong offset!");
static_assert(offsetof(AMod_SplinePoint_C, PreviousLocation) == 0x0002D8, "Member 'AMod_SplinePoint_C::PreviousLocation' has a wrong offset!");

}

