#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mod_Sun

#include "Basic.hpp"

#include "BP_ModContent_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Mod_Sun.Mod_Sun_C
// 0x0030 (0x02D8 - 0x02A8)
class AMod_Sun_C final : public ABP_ModContent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    billboard;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mod_PointLight;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Mod_SpotLight_IGLE_Interface_K2Node_ComponentBoundEvent_0_IGLE_OnPropertyValueChanged__DelegateSignature(const class FString& PropertyName);
	void ExecuteUbergraph_Mod_Sun(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Mod_Sun_C">();
	}
	static class AMod_Sun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMod_Sun_C>();
	}
};
static_assert(alignof(AMod_Sun_C) == 0x000008, "Wrong alignment on AMod_Sun_C");
static_assert(sizeof(AMod_Sun_C) == 0x0002D8, "Wrong size on AMod_Sun_C");
static_assert(offsetof(AMod_Sun_C, UberGraphFrame) == 0x0002A8, "Member 'AMod_Sun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMod_Sun_C, Arrow) == 0x0002B0, "Member 'AMod_Sun_C::Arrow' has a wrong offset!");
static_assert(offsetof(AMod_Sun_C, billboard) == 0x0002B8, "Member 'AMod_Sun_C::billboard' has a wrong offset!");
static_assert(offsetof(AMod_Sun_C, Mod_PointLight) == 0x0002C0, "Member 'AMod_Sun_C::Mod_PointLight' has a wrong offset!");
static_assert(offsetof(AMod_Sun_C, DirectionalLight) == 0x0002C8, "Member 'AMod_Sun_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(AMod_Sun_C, Sphere) == 0x0002D0, "Member 'AMod_Sun_C::Sphere' has a wrong offset!");

}

