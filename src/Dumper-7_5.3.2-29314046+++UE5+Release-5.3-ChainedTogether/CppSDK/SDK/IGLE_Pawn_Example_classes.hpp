#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IGLE_Pawn_Example

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "IGLE_Pawn_EditorBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass IGLE_Pawn_Example.IGLE_Pawn_Example_C
// 0x0100 (0x0730 - 0x0630)
class AIGLE_Pawn_Example_C final : public AIGLE_Pawn_EditorBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_IGLE_Pawn_Example_C;                // 0x0628(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               AutoPlacableIconCapture;                           // 0x0640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FocusOnSelectionTimeline_Alpha_EBB687394ACF11E86C17E39ABF246CFB; // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FocusOnSelectionTimeline__Direction_EBB687394ACF11E86C17E39ABF246CFB; // 0x064C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64D[0x3];                                      // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FocusOnSelectionTimeline;                          // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UIGLE_W_EditorHUD_C*                    EditorHUD;                                         // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSelectionDistance;                              // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LMBDown;                                           // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669[0x7];                                      // 0x0669(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PreviousCursorLocation;                            // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoxSelectionMinMouseSpeed;                         // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, class UTexture*>          AutoGeneratedPlacableIcons;                        // 0x0688(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_ModFoliageSpawner_C*                FoliageSpawner;                                    // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UIGLE_MeshWidget_C*                     MeshPickerWidget;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UIGLE_PickSplineWidget_C*               SplinePickerWidget;                                // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UIGLE_PickButtonWidget_C*               ButtonPickerWidget;                                // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Previous_Selected_Placables;                       // 0x06F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UIGLE_PickTriggerWidget_C*              TriggerPickerWidget;                               // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UIGLE_PickMaterialWidget_C*             MaterialPickerWidget;                              // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UIGLE_PickTurnstileWidget_C*            TurnstilePickerWidget;                             // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          In_Foliage_Mod;                                    // 0x0720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddActionToActionLog(const class FString& Text);
	void AutoFillIconsForPlacables(TArray<class AActor*>& TempActors, TMap<class UClass*, class UTexture*>* ActorClassToIconMap);
	void ChangeHighlightColor(bool Group);
	void CheckGroup(class AActor* Placable, bool* Grouped, class FName* GroupTag);
	void ClearGroupTag(class AActor* Placable);
	bool CursorTrace(ETraceTypeQuery TraceChannel, struct FHitResult* OutHit);
	void DetectFoliageMod();
	void DuplicateGroups(TArray<class AActor*>& DuplicatedActors, TArray<class AActor*>& SourceActors);
	void Event_OnViewportResize();
	void ExecuteUbergraph_IGLE_Pawn_Example(int32 EntryPoint);
	void FocusOnSelection();
	void FocusOnSelectionPrepare(struct FTransform* InitialTransform, struct FVector* SelectionMedian, double* SelectionRadius);
	void FocusOnSelectionTick(const struct FVector& SelectionLocation, double SelectionRadius, double Alpha, const struct FTransform& InitialTransform);
	void FocusOnSelectionTimeline__FinishedFunc();
	void FocusOnSelectionTimeline__UpdateFunc();
	void FoliageModDetection(bool* InFoliageMod);
	void FoliageSpawnerVisible(bool* bHiddenInGame);
	void Get_Icon_For_Placable_Actor(class AActor* PlacableActor, class UTexture** IconTexture);
	void InpActEvt_Ctrl_S_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Delete_K2Node_InputKeyEvent_13(const struct FKey& Key);
	void InpActEvt_E_K2Node_InputKeyEvent_11(const struct FKey& Key);
	void InpActEvt_Escape_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_F_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_16(const struct FKey& Key);
	void InpActEvt_LeftMouseButton_K2Node_InputKeyEvent_17(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_P_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_10(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_18(const struct FKey& Key);
	void InpActEvt_RightMouseButton_K2Node_InputKeyEvent_19(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_12(const struct FKey& Key);
	void InpActEvt_Y_K2Node_InputKeyEvent_14(const struct FKey& Key);
	void InpActEvt_Z_K2Node_InputKeyEvent_15(const struct FKey& Key);
	void LMB_Selection(bool LMB_Down_);
	void LMB_UseGizmo(bool LMB_Down);
	void LoadFromCustomDataObject(class UIGLE_CustomDataObjectBase_C* CustomDataObject);
	void LoadLevelEditor();
	void OpenPauseMenu();
	void RandomLocationInFoliageSpawner(const struct FVector& HitLocation, struct FVector* Out);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveForCaptureActors();
	void RemoveInvalidSplinePoints();
	void Save();
	void SaveToCustomDataObject(class UIGLE_CustomDataObjectBase_C* CustomDataObject);
	void SelectButton(int64 PlacableID, class UClass* ActorClass);
	void SelectPlacableActor(class AActor* Actor, bool CreateUndoAction);
	void SelectSpline(int64 PlacableID, class UClass* ActorClass);
	void SelectTrigger(int64 PlacableID, class UClass* ActorClass);
	void SelectTurnstile(int64 PlacableID, class UClass* ActorClass);
	void ShowFoliageSpawner(bool Show, bool RemoveMode);
	void SpawnFoliage(const struct FHitResult& HitResult, bool Remove);
	void SpawnTemplateFog();
	void TIck_BoxSelectionInput();
	void TryAddTemplate();
	void TryGroupActors(const TSet<class AActor*>& SelectedActors);
	void UpdatePickButtonRef(int64 PlacableID, const class FString& Name_0);
	void UpdatePickSplineRef(int64 PlacableID, const class FString& Name_0);
	void UpdatePickTriggerRef(int64 PlacableID, const class FString& Name_0);
	void UpdatePickTurnstileRef(int64 PlacableID, const class FString& Name_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"IGLE_Pawn_Example_C">();
	}
	static class AIGLE_Pawn_Example_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIGLE_Pawn_Example_C>();
	}
};
static_assert(alignof(AIGLE_Pawn_Example_C) == 0x000010, "Wrong alignment on AIGLE_Pawn_Example_C");
static_assert(sizeof(AIGLE_Pawn_Example_C) == 0x000730, "Wrong size on AIGLE_Pawn_Example_C");
static_assert(offsetof(AIGLE_Pawn_Example_C, UberGraphFrame_IGLE_Pawn_Example_C) == 0x000628, "Member 'AIGLE_Pawn_Example_C::UberGraphFrame_IGLE_Pawn_Example_C' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, Audio) == 0x000630, "Member 'AIGLE_Pawn_Example_C::Audio' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, Camera) == 0x000638, "Member 'AIGLE_Pawn_Example_C::Camera' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, AutoPlacableIconCapture) == 0x000640, "Member 'AIGLE_Pawn_Example_C::AutoPlacableIconCapture' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, FocusOnSelectionTimeline_Alpha_EBB687394ACF11E86C17E39ABF246CFB) == 0x000648, "Member 'AIGLE_Pawn_Example_C::FocusOnSelectionTimeline_Alpha_EBB687394ACF11E86C17E39ABF246CFB' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, FocusOnSelectionTimeline__Direction_EBB687394ACF11E86C17E39ABF246CFB) == 0x00064C, "Member 'AIGLE_Pawn_Example_C::FocusOnSelectionTimeline__Direction_EBB687394ACF11E86C17E39ABF246CFB' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, FocusOnSelectionTimeline) == 0x000650, "Member 'AIGLE_Pawn_Example_C::FocusOnSelectionTimeline' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, EditorHUD) == 0x000658, "Member 'AIGLE_Pawn_Example_C::EditorHUD' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, MaxSelectionDistance) == 0x000660, "Member 'AIGLE_Pawn_Example_C::MaxSelectionDistance' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, LMBDown) == 0x000668, "Member 'AIGLE_Pawn_Example_C::LMBDown' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, PreviousCursorLocation) == 0x000670, "Member 'AIGLE_Pawn_Example_C::PreviousCursorLocation' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, BoxSelectionMinMouseSpeed) == 0x000680, "Member 'AIGLE_Pawn_Example_C::BoxSelectionMinMouseSpeed' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, AutoGeneratedPlacableIcons) == 0x000688, "Member 'AIGLE_Pawn_Example_C::AutoGeneratedPlacableIcons' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, FoliageSpawner) == 0x0006D8, "Member 'AIGLE_Pawn_Example_C::FoliageSpawner' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, MeshPickerWidget) == 0x0006E0, "Member 'AIGLE_Pawn_Example_C::MeshPickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, SplinePickerWidget) == 0x0006E8, "Member 'AIGLE_Pawn_Example_C::SplinePickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, ButtonPickerWidget) == 0x0006F0, "Member 'AIGLE_Pawn_Example_C::ButtonPickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, Previous_Selected_Placables) == 0x0006F8, "Member 'AIGLE_Pawn_Example_C::Previous_Selected_Placables' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, TriggerPickerWidget) == 0x000708, "Member 'AIGLE_Pawn_Example_C::TriggerPickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, MaterialPickerWidget) == 0x000710, "Member 'AIGLE_Pawn_Example_C::MaterialPickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, TurnstilePickerWidget) == 0x000718, "Member 'AIGLE_Pawn_Example_C::TurnstilePickerWidget' has a wrong offset!");
static_assert(offsetof(AIGLE_Pawn_Example_C, In_Foliage_Mod) == 0x000720, "Member 'AIGLE_Pawn_Example_C::In_Foliage_Mod' has a wrong offset!");

}

